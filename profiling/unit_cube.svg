<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="981.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="208"><g><title>perf-exec (5 samples, 2.40%)</title><rect x="0.0000%" y="933" width="2.4038%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="943.50">pe..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="917" width="2.4038%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="927.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="901" width="2.4038%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="911.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="885" width="2.4038%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="869" width="2.4038%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="853" width="2.4038%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="837" width="2.4038%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="821" width="2.4038%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="805" width="2.4038%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="789" width="2.4038%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="773" width="2.4038%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="757" width="2.4038%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="741" width="2.4038%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="725" width="2.4038%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="709" width="2.4038%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="693" width="2.4038%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50">[u..</text></g><g><title>[unknown] (5 samples, 2.40%)</title><rect x="0.0000%" y="677" width="2.4038%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50">[u..</text></g><g><title>rustracer::shape::Shape::intersect (1 samples, 0.48%)</title><rect x="2.4038%" y="901" width="0.4808%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="2.6538%" y="911.50"></text></g><g><title>glm::builtin::matrix::inverse (1 samples, 0.48%)</title><rect x="2.4038%" y="885" width="0.4808%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="2.6538%" y="895.50"></text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::inverse (1 samples, 0.48%)</title><rect x="2.4038%" y="869" width="0.4808%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="2.6538%" y="879.50"></text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::determinant (1 samples, 0.48%)</title><rect x="2.4038%" y="853" width="0.4808%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="2.6538%" y="863.50"></text></g><g><title>[[stack]] (2 samples, 0.96%)</title><rect x="2.4038%" y="917" width="0.9615%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="2"/><text x="2.6538%" y="927.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.48%)</title><rect x="2.8846%" y="901" width="0.4808%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="3.1346%" y="911.50"></text></g><g><title>[libm.so.6] (1 samples, 0.48%)</title><rect x="3.3654%" y="917" width="0.4808%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="3.6154%" y="927.50"></text></g><g><title>indicatif::state::BarState::draw (1 samples, 0.48%)</title><rect x="3.3654%" y="901" width="0.4808%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="3.6154%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="901" width="0.9615%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="2"/><text x="4.5769%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="885" width="0.9615%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="2"/><text x="4.5769%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="869" width="0.9615%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="2"/><text x="4.5769%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="853" width="0.9615%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="2"/><text x="4.5769%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="837" width="0.9615%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="2"/><text x="4.5769%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="821" width="0.9615%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="2"/><text x="4.5769%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="805" width="0.9615%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="2"/><text x="4.5769%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="789" width="0.9615%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="2"/><text x="4.5769%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="773" width="0.9615%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="2"/><text x="4.5769%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="757" width="0.9615%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="2"/><text x="4.5769%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.96%)</title><rect x="4.3269%" y="741" width="0.9615%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="2"/><text x="4.5769%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.48%)</title><rect x="5.2885%" y="901" width="0.4808%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="5.5385%" y="911.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::inc (2 samples, 0.96%)</title><rect x="5.7692%" y="901" width="0.9615%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="2"/><text x="6.0192%" y="911.50"></text></g><g><title>rustracer::lights::Light::is_visible (1 samples, 0.48%)</title><rect x="6.7308%" y="901" width="0.4808%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="6.9808%" y="911.50"></text></g><g><title>rustracer::raytracer::RayTracer::render::{{closure}} (1 samples, 0.48%)</title><rect x="7.2115%" y="901" width="0.4808%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="7.4615%" y="911.50"></text></g><g><title>[unknown] (9 samples, 4.33%)</title><rect x="3.8462%" y="917" width="4.3269%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="9"/><text x="4.0962%" y="927.50">[unkn..</text></g><g><title>rustracer::raytracer::RayTracer::trace_ray (1 samples, 0.48%)</title><rect x="7.6923%" y="901" width="0.4808%" height="15" fill="rgb(208,69,12)" fg:x="16" fg:w="1"/><text x="7.9423%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.92%)</title><rect x="14.4231%" y="469" width="1.9231%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="4"/><text x="14.6731%" y="479.50">&lt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (4 samples, 1.92%)</title><rect x="14.4231%" y="453" width="1.9231%" height="15" fill="rgb(213,116,39)" fg:x="30" fg:w="4"/><text x="14.6731%" y="463.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (4 samples, 1.92%)</title><rect x="14.4231%" y="437" width="1.9231%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="4"/><text x="14.6731%" y="447.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.48%)</title><rect x="15.8654%" y="421" width="0.4808%" height="15" fill="rgb(206,96,30)" fg:x="33" fg:w="1"/><text x="16.1154%" y="431.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (1 samples, 0.48%)</title><rect x="16.3462%" y="469" width="0.4808%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="1"/><text x="16.5962%" y="479.50"></text></g><g><title>png::filter::filter_internal (19 samples, 9.13%)</title><rect x="8.6538%" y="485" width="9.1346%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="19"/><text x="8.9038%" y="495.50">png::filter::..</text></g><g><title>png::filter::filter_paeth (2 samples, 0.96%)</title><rect x="16.8269%" y="469" width="0.9615%" height="15" fill="rgb(239,60,40)" fg:x="35" fg:w="2"/><text x="17.0769%" y="479.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (1 samples, 0.48%)</title><rect x="17.3077%" y="453" width="0.4808%" height="15" fill="rgb(206,27,48)" fg:x="36" fg:w="1"/><text x="17.5577%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.48%)</title><rect x="19.2308%" y="453" width="0.4808%" height="15" fill="rgb(225,35,8)" fg:x="40" fg:w="1"/><text x="19.4808%" y="463.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (2 samples, 0.96%)</title><rect x="19.7115%" y="437" width="0.9615%" height="15" fill="rgb(250,213,24)" fg:x="41" fg:w="2"/><text x="19.9615%" y="447.50"></text></g><g><title>png::filter::filter (27 samples, 12.98%)</title><rect x="8.1731%" y="501" width="12.9808%" height="15" fill="rgb(247,123,22)" fg:x="17" fg:w="27"/><text x="8.4231%" y="511.50">png::filter::filter</text></g><g><title>png::filter::sum_buffer (7 samples, 3.37%)</title><rect x="17.7885%" y="485" width="3.3654%" height="15" fill="rgb(231,138,38)" fg:x="37" fg:w="7"/><text x="18.0385%" y="495.50">png..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 3.37%)</title><rect x="17.7885%" y="469" width="3.3654%" height="15" fill="rgb(231,145,46)" fg:x="37" fg:w="7"/><text x="18.0385%" y="479.50">cor..</text></g><g><title>png::filter::sum_buffer::{{closure}} (3 samples, 1.44%)</title><rect x="19.7115%" y="453" width="1.4423%" height="15" fill="rgb(251,118,11)" fg:x="41" fg:w="3"/><text x="19.9615%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (1 samples, 0.48%)</title><rect x="20.6731%" y="437" width="0.4808%" height="15" fill="rgb(217,147,25)" fg:x="43" fg:w="1"/><text x="20.9231%" y="447.50"></text></g><g><title>image::io::free_functions::write_buffer_impl (28 samples, 13.46%)</title><rect x="8.1731%" y="565" width="13.4615%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="28"/><text x="8.4231%" y="575.50">image::io::free_func..</text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (28 samples, 13.46%)</title><rect x="8.1731%" y="549" width="13.4615%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="28"/><text x="8.4231%" y="559.50">&lt;image::codecs::png:..</text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (28 samples, 13.46%)</title><rect x="8.1731%" y="533" width="13.4615%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="28"/><text x="8.4231%" y="543.50">image::codecs::png::..</text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (28 samples, 13.46%)</title><rect x="8.1731%" y="517" width="13.4615%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="28"/><text x="8.4231%" y="527.50">png::encoder::Writer..</text></g><g><title>std::io::Write::write_all (1 samples, 0.48%)</title><rect x="21.1538%" y="501" width="0.4808%" height="15" fill="rgb(221,10,30)" fg:x="44" fg:w="1"/><text x="21.4038%" y="511.50"></text></g><g><title>&lt;flate2::zlib::write::ZlibEncoder&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.48%)</title><rect x="21.1538%" y="485" width="0.4808%" height="15" fill="rgb(210,229,1)" fg:x="44" fg:w="1"/><text x="21.4038%" y="495.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as std::io::Write&gt;::write (1 samples, 0.48%)</title><rect x="21.1538%" y="469" width="0.4808%" height="15" fill="rgb(222,148,37)" fg:x="44" fg:w="1"/><text x="21.4038%" y="479.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (1 samples, 0.48%)</title><rect x="21.1538%" y="453" width="0.4808%" height="15" fill="rgb(234,67,33)" fg:x="44" fg:w="1"/><text x="21.4038%" y="463.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (1 samples, 0.48%)</title><rect x="21.1538%" y="437" width="0.4808%" height="15" fill="rgb(247,98,35)" fg:x="44" fg:w="1"/><text x="21.4038%" y="447.50"></text></g><g><title>flate2::mem::Compress::compress_vec (1 samples, 0.48%)</title><rect x="21.1538%" y="421" width="0.4808%" height="15" fill="rgb(247,138,52)" fg:x="44" fg:w="1"/><text x="21.4038%" y="431.50"></text></g><g><title>flate2::mem::Compress::compress (1 samples, 0.48%)</title><rect x="21.1538%" y="405" width="0.4808%" height="15" fill="rgb(213,79,30)" fg:x="44" fg:w="1"/><text x="21.4038%" y="415.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (1 samples, 0.48%)</title><rect x="21.1538%" y="389" width="0.4808%" height="15" fill="rgb(246,177,23)" fg:x="44" fg:w="1"/><text x="21.4038%" y="399.50"></text></g><g><title>miniz_oxide::deflate::stream::deflate (1 samples, 0.48%)</title><rect x="21.1538%" y="373" width="0.4808%" height="15" fill="rgb(230,62,27)" fg:x="44" fg:w="1"/><text x="21.4038%" y="383.50"></text></g><g><title>miniz_oxide::deflate::core::compress (1 samples, 0.48%)</title><rect x="21.1538%" y="357" width="0.4808%" height="15" fill="rgb(216,154,8)" fg:x="44" fg:w="1"/><text x="21.4038%" y="367.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (1 samples, 0.48%)</title><rect x="21.1538%" y="341" width="0.4808%" height="15" fill="rgb(244,35,45)" fg:x="44" fg:w="1"/><text x="21.4038%" y="351.50"></text></g><g><title>miniz_oxide::shared::update_adler32 (1 samples, 0.48%)</title><rect x="21.1538%" y="325" width="0.4808%" height="15" fill="rgb(251,115,12)" fg:x="44" fg:w="1"/><text x="21.4038%" y="335.50"></text></g><g><title>adler::Adler32::write_slice (1 samples, 0.48%)</title><rect x="21.1538%" y="309" width="0.4808%" height="15" fill="rgb(240,54,50)" fg:x="44" fg:w="1"/><text x="21.4038%" y="319.50"></text></g><g><title>adler::algo::&lt;impl adler::Adler32&gt;::compute (1 samples, 0.48%)</title><rect x="21.1538%" y="293" width="0.4808%" height="15" fill="rgb(233,84,52)" fg:x="44" fg:w="1"/><text x="21.4038%" y="303.50"></text></g><g><title>&lt;adler::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.48%)</title><rect x="21.1538%" y="277" width="0.4808%" height="15" fill="rgb(207,117,47)" fg:x="44" fg:w="1"/><text x="21.4038%" y="287.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (1 samples, 0.48%)</title><rect x="21.1538%" y="261" width="0.4808%" height="15" fill="rgb(249,43,39)" fg:x="44" fg:w="1"/><text x="21.4038%" y="271.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.48%)</title><rect x="21.1538%" y="245" width="0.4808%" height="15" fill="rgb(209,38,44)" fg:x="44" fg:w="1"/><text x="21.4038%" y="255.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (29 samples, 13.94%)</title><rect x="8.1731%" y="629" width="13.9423%" height="15" fill="rgb(236,212,23)" fg:x="17" fg:w="29"/><text x="8.4231%" y="639.50">image::buffer_::Image..</text></g><g><title>image::dynimage::save_buffer (29 samples, 13.94%)</title><rect x="8.1731%" y="613" width="13.9423%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="29"/><text x="8.4231%" y="623.50">image::dynimage::save..</text></g><g><title>image::io::free_functions::save_buffer_impl (29 samples, 13.94%)</title><rect x="8.1731%" y="597" width="13.9423%" height="15" fill="rgb(211,96,35)" fg:x="17" fg:w="29"/><text x="8.4231%" y="607.50">image::io::free_funct..</text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (29 samples, 13.94%)</title><rect x="8.1731%" y="581" width="13.9423%" height="15" fill="rgb(253,215,40)" fg:x="17" fg:w="29"/><text x="8.4231%" y="591.50">image::io::free_funct..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::new (1 samples, 0.48%)</title><rect x="21.6346%" y="565" width="0.4808%" height="15" fill="rgb(211,81,21)" fg:x="45" fg:w="1"/><text x="21.8846%" y="575.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::with_capacity (1 samples, 0.48%)</title><rect x="21.6346%" y="549" width="0.4808%" height="15" fill="rgb(208,190,38)" fg:x="45" fg:w="1"/><text x="21.8846%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.48%)</title><rect x="21.6346%" y="533" width="0.4808%" height="15" fill="rgb(235,213,38)" fg:x="45" fg:w="1"/><text x="21.8846%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.48%)</title><rect x="21.6346%" y="517" width="0.4808%" height="15" fill="rgb(237,122,38)" fg:x="45" fg:w="1"/><text x="21.8846%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.48%)</title><rect x="21.6346%" y="501" width="0.4808%" height="15" fill="rgb(244,218,35)" fg:x="45" fg:w="1"/><text x="21.8846%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.48%)</title><rect x="21.6346%" y="485" width="0.4808%" height="15" fill="rgb(240,68,47)" fg:x="45" fg:w="1"/><text x="21.8846%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.48%)</title><rect x="21.6346%" y="469" width="0.4808%" height="15" fill="rgb(210,16,53)" fg:x="45" fg:w="1"/><text x="21.8846%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.48%)</title><rect x="21.6346%" y="453" width="0.4808%" height="15" fill="rgb(235,124,12)" fg:x="45" fg:w="1"/><text x="21.8846%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.48%)</title><rect x="21.6346%" y="437" width="0.4808%" height="15" fill="rgb(224,169,11)" fg:x="45" fg:w="1"/><text x="21.8846%" y="447.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.48%)</title><rect x="21.6346%" y="421" width="0.4808%" height="15" fill="rgb(250,166,2)" fg:x="45" fg:w="1"/><text x="21.8846%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.48%)</title><rect x="21.6346%" y="405" width="0.4808%" height="15" fill="rgb(242,216,29)" fg:x="45" fg:w="1"/><text x="21.8846%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="389" width="0.4808%" height="15" fill="rgb(230,116,27)" fg:x="45" fg:w="1"/><text x="21.8846%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="373" width="0.4808%" height="15" fill="rgb(228,99,48)" fg:x="45" fg:w="1"/><text x="21.8846%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="357" width="0.4808%" height="15" fill="rgb(253,11,6)" fg:x="45" fg:w="1"/><text x="21.8846%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="341" width="0.4808%" height="15" fill="rgb(247,143,39)" fg:x="45" fg:w="1"/><text x="21.8846%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="325" width="0.4808%" height="15" fill="rgb(236,97,10)" fg:x="45" fg:w="1"/><text x="21.8846%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="309" width="0.4808%" height="15" fill="rgb(233,208,19)" fg:x="45" fg:w="1"/><text x="21.8846%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="21.6346%" y="293" width="0.4808%" height="15" fill="rgb(216,164,2)" fg:x="45" fg:w="1"/><text x="21.8846%" y="303.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (2 samples, 0.96%)</title><rect x="30.7692%" y="533" width="0.9615%" height="15" fill="rgb(220,129,5)" fg:x="64" fg:w="2"/><text x="31.0192%" y="543.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (2 samples, 0.96%)</title><rect x="30.7692%" y="517" width="0.9615%" height="15" fill="rgb(242,17,10)" fg:x="64" fg:w="2"/><text x="31.0192%" y="527.50"></text></g><g><title>glm::builtin::exp::inversesqrt (3 samples, 1.44%)</title><rect x="31.7308%" y="533" width="1.4423%" height="15" fill="rgb(242,107,0)" fg:x="66" fg:w="3"/><text x="31.9808%" y="543.50"></text></g><g><title>&lt;f32 as glm::traits::GenNum&lt;f32&gt;&gt;::map (3 samples, 1.44%)</title><rect x="31.7308%" y="517" width="1.4423%" height="15" fill="rgb(251,28,31)" fg:x="66" fg:w="3"/><text x="31.9808%" y="527.50"></text></g><g><title>glm::builtin::exp::inversesqrt::{{closure}} (3 samples, 1.44%)</title><rect x="31.7308%" y="501" width="1.4423%" height="15" fill="rgb(233,223,10)" fg:x="66" fg:w="3"/><text x="31.9808%" y="511.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::recip (3 samples, 1.44%)</title><rect x="31.7308%" y="485" width="1.4423%" height="15" fill="rgb(215,21,27)" fg:x="66" fg:w="3"/><text x="31.9808%" y="495.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::recip (3 samples, 1.44%)</title><rect x="31.7308%" y="469" width="1.4423%" height="15" fill="rgb(232,23,21)" fg:x="66" fg:w="3"/><text x="31.9808%" y="479.50"></text></g><g><title>glm::builtin::geom::normalize (6 samples, 2.88%)</title><rect x="30.7692%" y="549" width="2.8846%" height="15" fill="rgb(244,5,23)" fg:x="64" fg:w="6"/><text x="31.0192%" y="559.50">gl..</text></g><g><title>glm::builtin::geom::dot (1 samples, 0.48%)</title><rect x="33.1731%" y="533" width="0.4808%" height="15" fill="rgb(226,81,46)" fg:x="69" fg:w="1"/><text x="33.4231%" y="543.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as glm::vec::traits::GenNumVec&lt;T&gt;&gt;::sum (1 samples, 0.48%)</title><rect x="33.1731%" y="517" width="0.4808%" height="15" fill="rgb(247,70,30)" fg:x="69" fg:w="1"/><text x="33.4231%" y="527.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="33.1731%" y="501" width="0.4808%" height="15" fill="rgb(212,68,19)" fg:x="69" fg:w="1"/><text x="33.4231%" y="511.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.96%)</title><rect x="34.1346%" y="517" width="0.9615%" height="15" fill="rgb(240,187,13)" fg:x="71" fg:w="2"/><text x="34.3846%" y="527.50"></text></g><g><title>std::time::Instant::duration_since (2 samples, 0.96%)</title><rect x="34.1346%" y="501" width="0.9615%" height="15" fill="rgb(223,113,26)" fg:x="71" fg:w="2"/><text x="34.3846%" y="511.50"></text></g><g><title>std::time::Instant::checked_duration_since (2 samples, 0.96%)</title><rect x="34.1346%" y="485" width="0.9615%" height="15" fill="rgb(206,192,2)" fg:x="71" fg:w="2"/><text x="34.3846%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (2 samples, 0.96%)</title><rect x="34.1346%" y="469" width="0.9615%" height="15" fill="rgb(241,108,4)" fg:x="71" fg:w="2"/><text x="34.3846%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.96%)</title><rect x="34.1346%" y="453" width="0.9615%" height="15" fill="rgb(247,173,49)" fg:x="71" fg:w="2"/><text x="34.3846%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.48%)</title><rect x="34.6154%" y="437" width="0.4808%" height="15" fill="rgb(224,114,35)" fg:x="72" fg:w="1"/><text x="34.8654%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.48%)</title><rect x="34.6154%" y="421" width="0.4808%" height="15" fill="rgb(245,159,27)" fg:x="72" fg:w="1"/><text x="34.8654%" y="431.50"></text></g><g><title>indicatif::state::AtomicPosition::allow (4 samples, 1.92%)</title><rect x="33.6538%" y="533" width="1.9231%" height="15" fill="rgb(245,172,44)" fg:x="70" fg:w="4"/><text x="33.9038%" y="543.50">i..</text></g><g><title>core::cmp::PartialOrd::lt (1 samples, 0.48%)</title><rect x="35.0962%" y="517" width="0.4808%" height="15" fill="rgb(236,23,11)" fg:x="73" fg:w="1"/><text x="35.3462%" y="527.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.48%)</title><rect x="35.0962%" y="501" width="0.4808%" height="15" fill="rgb(205,117,38)" fg:x="73" fg:w="1"/><text x="35.3462%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::inner::Instant as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.48%)</title><rect x="35.0962%" y="485" width="0.4808%" height="15" fill="rgb(237,72,25)" fg:x="73" fg:w="1"/><text x="35.3462%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.48%)</title><rect x="35.0962%" y="469" width="0.4808%" height="15" fill="rgb(244,70,9)" fg:x="73" fg:w="1"/><text x="35.3462%" y="479.50"></text></g><g><title>indicatif::state::AtomicPosition::inc (4 samples, 1.92%)</title><rect x="35.5769%" y="533" width="1.9231%" height="15" fill="rgb(217,125,39)" fg:x="74" fg:w="4"/><text x="35.8269%" y="543.50">i..</text></g><g><title>portable_atomic::AtomicU64::fetch_add (4 samples, 1.92%)</title><rect x="35.5769%" y="517" width="1.9231%" height="15" fill="rgb(235,36,10)" fg:x="74" fg:w="4"/><text x="35.8269%" y="527.50">p..</text></g><g><title>core::sync::atomic::AtomicU64::fetch_add (4 samples, 1.92%)</title><rect x="35.5769%" y="501" width="1.9231%" height="15" fill="rgb(251,123,47)" fg:x="74" fg:w="4"/><text x="35.8269%" y="511.50">c..</text></g><g><title>core::sync::atomic::atomic_add (4 samples, 1.92%)</title><rect x="35.5769%" y="485" width="1.9231%" height="15" fill="rgb(221,13,13)" fg:x="74" fg:w="4"/><text x="35.8269%" y="495.50">c..</text></g><g><title>[[vdso]] (6 samples, 2.88%)</title><rect x="38.4615%" y="501" width="2.8846%" height="15" fill="rgb(238,131,9)" fg:x="80" fg:w="6"/><text x="38.7115%" y="511.50">[[..</text></g><g><title>[[vdso]] (2 samples, 0.96%)</title><rect x="40.3846%" y="485" width="0.9615%" height="15" fill="rgb(211,50,8)" fg:x="84" fg:w="2"/><text x="40.6346%" y="495.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::inc (18 samples, 8.65%)</title><rect x="33.6538%" y="549" width="8.6538%" height="15" fill="rgb(245,182,24)" fg:x="70" fg:w="18"/><text x="33.9038%" y="559.50">indicatif::p..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (10 samples, 4.81%)</title><rect x="37.5000%" y="533" width="4.8077%" height="15" fill="rgb(242,14,37)" fg:x="78" fg:w="10"/><text x="37.7500%" y="543.50">std::s..</text></g><g><title>__GI___clock_gettime (9 samples, 4.33%)</title><rect x="37.9808%" y="517" width="4.3269%" height="15" fill="rgb(246,228,12)" fg:x="79" fg:w="9"/><text x="38.2308%" y="527.50">__GI_..</text></g><g><title>__vdso_clock_gettime (2 samples, 0.96%)</title><rect x="41.3462%" y="501" width="0.9615%" height="15" fill="rgb(213,55,15)" fg:x="86" fg:w="2"/><text x="41.5962%" y="511.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::tick_inner (1 samples, 0.48%)</title><rect x="42.3077%" y="549" width="0.4808%" height="15" fill="rgb(209,9,3)" fg:x="88" fg:w="1"/><text x="42.5577%" y="559.50"></text></g><g><title>indicatif::state::BarState::tick (1 samples, 0.48%)</title><rect x="42.3077%" y="533" width="0.4808%" height="15" fill="rgb(230,59,30)" fg:x="88" fg:w="1"/><text x="42.5577%" y="543.50"></text></g><g><title>indicatif::state::BarState::update_estimate_and_draw (1 samples, 0.48%)</title><rect x="42.3077%" y="517" width="0.4808%" height="15" fill="rgb(209,121,21)" fg:x="88" fg:w="1"/><text x="42.5577%" y="527.50"></text></g><g><title>indicatif::state::BarState::draw (1 samples, 0.48%)</title><rect x="42.3077%" y="501" width="0.4808%" height="15" fill="rgb(220,109,13)" fg:x="88" fg:w="1"/><text x="42.5577%" y="511.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (1 samples, 0.48%)</title><rect x="42.3077%" y="485" width="0.4808%" height="15" fill="rgb(232,18,1)" fg:x="88" fg:w="1"/><text x="42.5577%" y="495.50"></text></g><g><title>console::term::Term::size (1 samples, 0.48%)</title><rect x="42.3077%" y="469" width="0.4808%" height="15" fill="rgb(215,41,42)" fg:x="88" fg:w="1"/><text x="42.5577%" y="479.50"></text></g><g><title>console::term::Term::size_checked (1 samples, 0.48%)</title><rect x="42.3077%" y="453" width="0.4808%" height="15" fill="rgb(224,123,36)" fg:x="88" fg:w="1"/><text x="42.5577%" y="463.50"></text></g><g><title>console::unix_term::terminal_size (1 samples, 0.48%)</title><rect x="42.3077%" y="437" width="0.4808%" height="15" fill="rgb(240,125,3)" fg:x="88" fg:w="1"/><text x="42.5577%" y="447.50"></text></g><g><title>__GI___ioctl (1 samples, 0.48%)</title><rect x="42.3077%" y="421" width="0.4808%" height="15" fill="rgb(205,98,50)" fg:x="88" fg:w="1"/><text x="42.5577%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="42.3077%" y="405" width="0.4808%" height="15" fill="rgb(205,185,37)" fg:x="88" fg:w="1"/><text x="42.5577%" y="415.50"></text></g><g><title>rustracer::lights::to_rgb (2 samples, 0.96%)</title><rect x="42.7885%" y="549" width="0.9615%" height="15" fill="rgb(238,207,15)" fg:x="89" fg:w="2"/><text x="43.0385%" y="559.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (2 samples, 0.96%)</title><rect x="43.7500%" y="517" width="0.9615%" height="15" fill="rgb(213,199,42)" fg:x="91" fg:w="2"/><text x="44.0000%" y="527.50"></text></g><g><title>rustracer::raytracer::Ray::transform (6 samples, 2.88%)</title><rect x="43.7500%" y="549" width="2.8846%" height="15" fill="rgb(235,201,11)" fg:x="91" fg:w="6"/><text x="44.0000%" y="559.50">ru..</text></g><g><title>glm::mat::mat::Matrix4&lt;T&gt;::mul_v (6 samples, 2.88%)</title><rect x="43.7500%" y="533" width="2.8846%" height="15" fill="rgb(207,46,11)" fg:x="91" fg:w="6"/><text x="44.0000%" y="543.50">gl..</text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (4 samples, 1.92%)</title><rect x="44.7115%" y="517" width="1.9231%" height="15" fill="rgb(241,35,35)" fg:x="93" fg:w="4"/><text x="44.9615%" y="527.50">&lt;..</text></g><g><title>&lt;glm::mat::mat::Matrix3&lt;T&gt; as core::ops::arith::Mul&lt;glm::vec::vec::Vector3&lt;T&gt;&gt;&gt;::mul (1 samples, 0.48%)</title><rect x="47.5962%" y="341" width="0.4808%" height="15" fill="rgb(243,32,47)" fg:x="99" fg:w="1"/><text x="47.8462%" y="351.50"></text></g><g><title>glm::mat::mat::Matrix3&lt;T&gt;::mul_v (1 samples, 0.48%)</title><rect x="47.5962%" y="325" width="0.4808%" height="15" fill="rgb(247,202,23)" fg:x="99" fg:w="1"/><text x="47.8462%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="47.5962%" y="309" width="0.4808%" height="15" fill="rgb(219,102,11)" fg:x="99" fg:w="1"/><text x="47.8462%" y="319.50"></text></g><g><title>core::array::&lt;impl [T: N]&gt;::try_map::{{closure}} (1 samples, 0.48%)</title><rect x="48.5577%" y="293" width="0.4808%" height="15" fill="rgb(243,110,44)" fg:x="101" fg:w="1"/><text x="48.8077%" y="303.50"></text></g><g><title>core::array::try_from_trusted_iterator (1 samples, 0.48%)</title><rect x="48.5577%" y="277" width="0.4808%" height="15" fill="rgb(222,74,54)" fg:x="101" fg:w="1"/><text x="48.8077%" y="287.50"></text></g><g><title>core::array::try_from_fn (1 samples, 0.48%)</title><rect x="48.5577%" y="261" width="0.4808%" height="15" fill="rgb(216,99,12)" fg:x="101" fg:w="1"/><text x="48.8077%" y="271.50"></text></g><g><title>core::array::&lt;impl [T: N]&gt;::map (3 samples, 1.44%)</title><rect x="48.0769%" y="341" width="1.4423%" height="15" fill="rgb(226,22,26)" fg:x="100" fg:w="3"/><text x="48.3269%" y="351.50"></text></g><g><title>core::array::&lt;impl [T: N]&gt;::try_map (2 samples, 0.96%)</title><rect x="48.5577%" y="325" width="0.9615%" height="15" fill="rgb(217,163,10)" fg:x="101" fg:w="2"/><text x="48.8077%" y="335.50"></text></g><g><title>core::array::drain::drain_array_with (2 samples, 0.96%)</title><rect x="48.5577%" y="309" width="0.9615%" height="15" fill="rgb(213,25,53)" fg:x="101" fg:w="2"/><text x="48.8077%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.48%)</title><rect x="49.0385%" y="293" width="0.4808%" height="15" fill="rgb(252,105,26)" fg:x="102" fg:w="1"/><text x="49.2885%" y="303.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::recip (1 samples, 0.48%)</title><rect x="49.5192%" y="277" width="0.4808%" height="15" fill="rgb(220,39,43)" fg:x="103" fg:w="1"/><text x="49.7692%" y="287.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::recip (1 samples, 0.48%)</title><rect x="49.5192%" y="261" width="0.4808%" height="15" fill="rgb(229,68,48)" fg:x="103" fg:w="1"/><text x="49.7692%" y="271.50"></text></g><g><title>glm::builtin::geom::normalize (3 samples, 1.44%)</title><rect x="49.5192%" y="341" width="1.4423%" height="15" fill="rgb(252,8,32)" fg:x="103" fg:w="3"/><text x="49.7692%" y="351.50"></text></g><g><title>glm::builtin::exp::inversesqrt (3 samples, 1.44%)</title><rect x="49.5192%" y="325" width="1.4423%" height="15" fill="rgb(223,20,43)" fg:x="103" fg:w="3"/><text x="49.7692%" y="335.50"></text></g><g><title>&lt;f32 as glm::traits::GenNum&lt;f32&gt;&gt;::map (3 samples, 1.44%)</title><rect x="49.5192%" y="309" width="1.4423%" height="15" fill="rgb(229,81,49)" fg:x="103" fg:w="3"/><text x="49.7692%" y="319.50"></text></g><g><title>glm::builtin::exp::inversesqrt::{{closure}} (3 samples, 1.44%)</title><rect x="49.5192%" y="293" width="1.4423%" height="15" fill="rgb(236,28,36)" fg:x="103" fg:w="3"/><text x="49.7692%" y="303.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::sqrt (2 samples, 0.96%)</title><rect x="50.0000%" y="277" width="0.9615%" height="15" fill="rgb(249,185,26)" fg:x="104" fg:w="2"/><text x="50.2500%" y="287.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (2 samples, 0.96%)</title><rect x="50.0000%" y="261" width="0.9615%" height="15" fill="rgb(249,174,33)" fg:x="104" fg:w="2"/><text x="50.2500%" y="271.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::recip (2 samples, 0.96%)</title><rect x="51.4423%" y="309" width="0.9615%" height="15" fill="rgb(233,201,37)" fg:x="107" fg:w="2"/><text x="51.6923%" y="319.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::recip (2 samples, 0.96%)</title><rect x="51.4423%" y="293" width="0.9615%" height="15" fill="rgb(221,78,26)" fg:x="107" fg:w="2"/><text x="51.6923%" y="303.50"></text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector3&lt;T&gt;&gt; for glm::mat::mat::Matrix3&lt;T&gt;&gt;::inverse (4 samples, 1.92%)</title><rect x="51.4423%" y="325" width="1.9231%" height="15" fill="rgb(250,127,30)" fg:x="107" fg:w="4"/><text x="51.6923%" y="335.50">g..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector3&lt;T&gt;&gt; for glm::mat::mat::Matrix3&lt;T&gt;&gt;::determinant (2 samples, 0.96%)</title><rect x="52.4038%" y="309" width="0.9615%" height="15" fill="rgb(230,49,44)" fg:x="109" fg:w="2"/><text x="52.6538%" y="319.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (2 samples, 0.96%)</title><rect x="52.4038%" y="293" width="0.9615%" height="15" fill="rgb(229,67,23)" fg:x="109" fg:w="2"/><text x="52.6538%" y="303.50"></text></g><g><title>glm::basenum::ApproxEq::is_approx_eq (1 samples, 0.48%)</title><rect x="53.3654%" y="309" width="0.4808%" height="15" fill="rgb(249,83,47)" fg:x="111" fg:w="1"/><text x="53.6154%" y="319.50"></text></g><g><title>&lt;f32 as glm::basenum::ApproxEq&gt;::is_close_to (1 samples, 0.48%)</title><rect x="53.3654%" y="293" width="0.4808%" height="15" fill="rgb(215,43,3)" fg:x="111" fg:w="1"/><text x="53.6154%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="53.8462%" y="293" width="0.4808%" height="15" fill="rgb(238,154,13)" fg:x="112" fg:w="1"/><text x="54.0962%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (6 samples, 2.88%)</title><rect x="54.3269%" y="293" width="2.8846%" height="15" fill="rgb(219,56,2)" fg:x="113" fg:w="6"/><text x="54.5769%" y="303.50">&lt;f..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::determinant (8 samples, 3.85%)</title><rect x="53.8462%" y="309" width="3.8462%" height="15" fill="rgb(233,0,4)" fg:x="112" fg:w="8"/><text x="54.0962%" y="319.50">glm:..</text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.48%)</title><rect x="57.2115%" y="293" width="0.4808%" height="15" fill="rgb(235,30,7)" fg:x="119" fg:w="1"/><text x="57.4615%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.48%)</title><rect x="58.1731%" y="293" width="0.4808%" height="15" fill="rgb(250,79,13)" fg:x="121" fg:w="1"/><text x="58.4231%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="58.6538%" y="277" width="0.4808%" height="15" fill="rgb(211,146,34)" fg:x="122" fg:w="1"/><text x="58.9038%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (5 samples, 2.40%)</title><rect x="59.1346%" y="277" width="2.4038%" height="15" fill="rgb(228,22,38)" fg:x="123" fg:w="5"/><text x="59.3846%" y="287.50">&lt;f..</text></g><g><title>glm::builtin::matrix::inverse (25 samples, 12.02%)</title><rect x="50.9615%" y="341" width="12.0192%" height="15" fill="rgb(235,168,5)" fg:x="106" fg:w="25"/><text x="51.2115%" y="351.50">glm::builtin::matr..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::inverse (20 samples, 9.62%)</title><rect x="53.3654%" y="325" width="9.6154%" height="15" fill="rgb(221,155,16)" fg:x="111" fg:w="20"/><text x="53.6154%" y="335.50">glm::mat::sqma..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::inverse::{{closure}} (11 samples, 5.29%)</title><rect x="57.6923%" y="309" width="5.2885%" height="15" fill="rgb(215,215,53)" fg:x="120" fg:w="11"/><text x="57.9423%" y="319.50">glm::m..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector3&lt;T&gt;&gt; for glm::mat::mat::Matrix3&lt;T&gt;&gt;::determinant (9 samples, 4.33%)</title><rect x="58.6538%" y="293" width="4.3269%" height="15" fill="rgb(223,4,10)" fg:x="122" fg:w="9"/><text x="58.9038%" y="303.50">glm::..</text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (3 samples, 1.44%)</title><rect x="61.5385%" y="277" width="1.4423%" height="15" fill="rgb(234,103,6)" fg:x="128" fg:w="3"/><text x="61.7885%" y="287.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.48%)</title><rect x="63.9423%" y="325" width="0.4808%" height="15" fill="rgb(227,97,0)" fg:x="133" fg:w="1"/><text x="64.1923%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="63.9423%" y="309" width="0.4808%" height="15" fill="rgb(234,150,53)" fg:x="133" fg:w="1"/><text x="64.1923%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.92%)</title><rect x="64.4231%" y="325" width="1.9231%" height="15" fill="rgb(228,201,54)" fg:x="134" fg:w="4"/><text x="64.6731%" y="335.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::all (4 samples, 1.92%)</title><rect x="66.3462%" y="309" width="1.9231%" height="15" fill="rgb(222,22,37)" fg:x="138" fg:w="4"/><text x="66.5962%" y="319.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 1.92%)</title><rect x="66.3462%" y="293" width="1.9231%" height="15" fill="rgb(237,53,32)" fg:x="138" fg:w="4"/><text x="66.5962%" y="303.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (4 samples, 1.92%)</title><rect x="66.3462%" y="277" width="1.9231%" height="15" fill="rgb(233,25,53)" fg:x="138" fg:w="4"/><text x="66.5962%" y="287.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (4 samples, 1.92%)</title><rect x="66.3462%" y="261" width="1.9231%" height="15" fill="rgb(210,40,34)" fg:x="138" fg:w="4"/><text x="66.5962%" y="271.50">c..</text></g><g><title>&lt;rustracer::primitive::Square as rustracer::primitive::PrimitiveComponent&gt;::intersect::within_square (4 samples, 1.92%)</title><rect x="66.3462%" y="245" width="1.9231%" height="15" fill="rgb(241,220,44)" fg:x="138" fg:w="4"/><text x="66.5962%" y="255.50">&lt;..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (4 samples, 1.92%)</title><rect x="66.3462%" y="229" width="1.9231%" height="15" fill="rgb(235,28,35)" fg:x="138" fg:w="4"/><text x="66.5962%" y="239.50">c..</text></g><g><title>core::ops::range::RangeBounds::contains (4 samples, 1.92%)</title><rect x="66.3462%" y="213" width="1.9231%" height="15" fill="rgb(210,56,17)" fg:x="138" fg:w="4"/><text x="66.5962%" y="223.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (3 samples, 1.44%)</title><rect x="66.8269%" y="197" width="1.4423%" height="15" fill="rgb(224,130,29)" fg:x="139" fg:w="3"/><text x="67.0769%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::le (3 samples, 1.44%)</title><rect x="66.8269%" y="181" width="1.4423%" height="15" fill="rgb(235,212,8)" fg:x="139" fg:w="3"/><text x="67.0769%" y="191.50"></text></g><g><title>rustracer::primitive::Plane::uv_map (2 samples, 0.96%)</title><rect x="78.3654%" y="293" width="0.9615%" height="15" fill="rgb(223,33,50)" fg:x="163" fg:w="2"/><text x="78.6154%" y="303.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 1.92%)</title><rect x="79.3269%" y="277" width="1.9231%" height="15" fill="rgb(219,149,13)" fg:x="165" fg:w="4"/><text x="79.5769%" y="287.50">&lt;..</text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (4 samples, 1.92%)</title><rect x="79.3269%" y="261" width="1.9231%" height="15" fill="rgb(250,156,29)" fg:x="165" fg:w="4"/><text x="79.5769%" y="271.50">&lt;..</text></g><g><title>&lt;rustracer::primitive::Square as rustracer::primitive::PrimitiveComponent&gt;::intersect (34 samples, 16.35%)</title><rect x="66.3462%" y="325" width="16.3462%" height="15" fill="rgb(216,193,19)" fg:x="138" fg:w="34"/><text x="66.5962%" y="335.50">&lt;rustracer::primitive::Sq..</text></g><g><title>rustracer::primitive::Plane::intersect (30 samples, 14.42%)</title><rect x="68.2692%" y="309" width="14.4231%" height="15" fill="rgb(216,135,14)" fg:x="142" fg:w="30"/><text x="68.5192%" y="319.50">rustracer::primitive::..</text></g><g><title>rustracer::raytracer::Ray::at (7 samples, 3.37%)</title><rect x="79.3269%" y="293" width="3.3654%" height="15" fill="rgb(241,47,5)" fg:x="165" fg:w="7"/><text x="79.5769%" y="303.50">rus..</text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (3 samples, 1.44%)</title><rect x="81.2500%" y="277" width="1.4423%" height="15" fill="rgb(233,42,35)" fg:x="169" fg:w="3"/><text x="81.5000%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (3 samples, 1.44%)</title><rect x="81.2500%" y="261" width="1.4423%" height="15" fill="rgb(231,13,6)" fg:x="169" fg:w="3"/><text x="81.5000%" y="271.50"></text></g><g><title>rustracer::primitive::Primitive::intersect (43 samples, 20.67%)</title><rect x="62.9808%" y="341" width="20.6731%" height="15" fill="rgb(207,181,40)" fg:x="131" fg:w="43"/><text x="63.2308%" y="351.50">rustracer::primitive::Primitive::..</text></g><g><title>core::iter::traits::iterator::Iterator::min (2 samples, 0.96%)</title><rect x="82.6923%" y="325" width="0.9615%" height="15" fill="rgb(254,173,49)" fg:x="172" fg:w="2"/><text x="82.9423%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (2 samples, 0.96%)</title><rect x="82.6923%" y="309" width="0.9615%" height="15" fill="rgb(221,1,38)" fg:x="172" fg:w="2"/><text x="82.9423%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2 samples, 0.96%)</title><rect x="82.6923%" y="293" width="0.9615%" height="15" fill="rgb(206,124,46)" fg:x="172" fg:w="2"/><text x="82.9423%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.96%)</title><rect x="82.6923%" y="277" width="0.9615%" height="15" fill="rgb(249,21,11)" fg:x="172" fg:w="2"/><text x="82.9423%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rustracer::intersection::ComponentIntersection&gt;&gt; (1 samples, 0.48%)</title><rect x="83.1731%" y="261" width="0.4808%" height="15" fill="rgb(222,201,40)" fg:x="173" fg:w="1"/><text x="83.4231%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.48%)</title><rect x="83.1731%" y="245" width="0.4808%" height="15" fill="rgb(235,61,29)" fg:x="173" fg:w="1"/><text x="83.4231%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rustracer::intersection::ComponentIntersection,alloc::alloc::Global&gt;&gt; (1 samples, 0.48%)</title><rect x="83.1731%" y="229" width="0.4808%" height="15" fill="rgb(219,207,3)" fg:x="173" fg:w="1"/><text x="83.4231%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.48%)</title><rect x="83.1731%" y="213" width="0.4808%" height="15" fill="rgb(222,56,46)" fg:x="173" fg:w="1"/><text x="83.4231%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rustracer::intersection::ComponentIntersection&gt;&gt; (1 samples, 0.48%)</title><rect x="83.1731%" y="197" width="0.4808%" height="15" fill="rgb(239,76,54)" fg:x="173" fg:w="1"/><text x="83.4231%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.48%)</title><rect x="83.1731%" y="181" width="0.4808%" height="15" fill="rgb(231,124,27)" fg:x="173" fg:w="1"/><text x="83.4231%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.48%)</title><rect x="83.1731%" y="165" width="0.4808%" height="15" fill="rgb(249,195,6)" fg:x="173" fg:w="1"/><text x="83.4231%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.48%)</title><rect x="83.1731%" y="149" width="0.4808%" height="15" fill="rgb(237,174,47)" fg:x="173" fg:w="1"/><text x="83.4231%" y="159.50"></text></g><g><title>__GI___libc_free (1 samples, 0.48%)</title><rect x="83.1731%" y="133" width="0.4808%" height="15" fill="rgb(206,201,31)" fg:x="173" fg:w="1"/><text x="83.4231%" y="143.50"></text></g><g><title>_int_free (1 samples, 0.48%)</title><rect x="83.1731%" y="117" width="0.4808%" height="15" fill="rgb(231,57,52)" fg:x="173" fg:w="1"/><text x="83.4231%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 37.50%)</title><rect x="47.1154%" y="453" width="37.5000%" height="15" fill="rgb(248,177,22)" fg:x="98" fg:w="78"/><text x="47.3654%" y="463.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::i..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (78 samples, 37.50%)</title><rect x="47.1154%" y="437" width="37.5000%" height="15" fill="rgb(215,211,37)" fg:x="98" fg:w="78"/><text x="47.3654%" y="447.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 37.50%)</title><rect x="47.1154%" y="421" width="37.5000%" height="15" fill="rgb(241,128,51)" fg:x="98" fg:w="78"/><text x="47.3654%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (78 samples, 37.50%)</title><rect x="47.1154%" y="405" width="37.5000%" height="15" fill="rgb(227,165,31)" fg:x="98" fg:w="78"/><text x="47.3654%" y="415.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (78 samples, 37.50%)</title><rect x="47.1154%" y="389" width="37.5000%" height="15" fill="rgb(228,167,24)" fg:x="98" fg:w="78"/><text x="47.3654%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce..</text></g><g><title>rustracer::raytracer::RayTracer::trace_ray::{{closure}} (78 samples, 37.50%)</title><rect x="47.1154%" y="373" width="37.5000%" height="15" fill="rgb(228,143,12)" fg:x="98" fg:w="78"/><text x="47.3654%" y="383.50">rustracer::raytracer::RayTracer::trace_ray::{{closure}}</text></g><g><title>rustracer::shape::Shape::intersect (78 samples, 37.50%)</title><rect x="47.1154%" y="357" width="37.5000%" height="15" fill="rgb(249,149,8)" fg:x="98" fg:w="78"/><text x="47.3654%" y="367.50">rustracer::shape::Shape::intersect</text></g><g><title>rustracer::raytracer::Ray::to_object_space (2 samples, 0.96%)</title><rect x="83.6538%" y="341" width="0.9615%" height="15" fill="rgb(243,35,44)" fg:x="174" fg:w="2"/><text x="83.9038%" y="351.50"></text></g><g><title>rustracer::raytracer::Ray::transform (2 samples, 0.96%)</title><rect x="83.6538%" y="325" width="0.9615%" height="15" fill="rgb(246,89,9)" fg:x="174" fg:w="2"/><text x="83.9038%" y="335.50"></text></g><g><title>glm::mat::mat::Matrix4&lt;T&gt;::mul_v (1 samples, 0.48%)</title><rect x="84.1346%" y="309" width="0.4808%" height="15" fill="rgb(233,213,13)" fg:x="175" fg:w="1"/><text x="84.3846%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (80 samples, 38.46%)</title><rect x="46.6346%" y="533" width="38.4615%" height="15" fill="rgb(233,141,41)" fg:x="97" fg:w="80"/><text x="46.8846%" y="543.50">core::iter::traits::iterator::Iterator::min</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (80 samples, 38.46%)</title><rect x="46.6346%" y="517" width="38.4615%" height="15" fill="rgb(239,167,4)" fg:x="97" fg:w="80"/><text x="46.8846%" y="527.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (80 samples, 38.46%)</title><rect x="46.6346%" y="501" width="38.4615%" height="15" fill="rgb(209,217,16)" fg:x="97" fg:w="80"/><text x="46.8846%" y="511.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 38.46%)</title><rect x="46.6346%" y="485" width="38.4615%" height="15" fill="rgb(219,88,35)" fg:x="97" fg:w="80"/><text x="46.8846%" y="495.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 38.46%)</title><rect x="46.6346%" y="469" width="38.4615%" height="15" fill="rgb(220,193,23)" fg:x="97" fg:w="80"/><text x="46.8846%" y="479.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::ite..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.48%)</title><rect x="84.6154%" y="453" width="0.4808%" height="15" fill="rgb(230,90,52)" fg:x="176" fg:w="1"/><text x="84.8654%" y="463.50"></text></g><g><title>glm::builtin::geom::dot (1 samples, 0.48%)</title><rect x="85.0962%" y="389" width="0.4808%" height="15" fill="rgb(252,106,19)" fg:x="177" fg:w="1"/><text x="85.3462%" y="399.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as glm::vec::traits::GenNumVec&lt;T&gt;&gt;::sum (1 samples, 0.48%)</title><rect x="85.0962%" y="373" width="0.4808%" height="15" fill="rgb(206,74,20)" fg:x="177" fg:w="1"/><text x="85.3462%" y="383.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="85.0962%" y="357" width="0.4808%" height="15" fill="rgb(230,138,44)" fg:x="177" fg:w="1"/><text x="85.3462%" y="367.50"></text></g><g><title>rustracer::lights::Light::direction_to_point (1 samples, 0.48%)</title><rect x="85.5769%" y="389" width="0.4808%" height="15" fill="rgb(235,182,43)" fg:x="178" fg:w="1"/><text x="85.8269%" y="399.50"></text></g><g><title>glm::builtin::geom::normalize (1 samples, 0.48%)</title><rect x="85.5769%" y="373" width="0.4808%" height="15" fill="rgb(242,16,51)" fg:x="178" fg:w="1"/><text x="85.8269%" y="383.50"></text></g><g><title>glm::builtin::geom::dot (1 samples, 0.48%)</title><rect x="85.5769%" y="357" width="0.4808%" height="15" fill="rgb(248,9,4)" fg:x="178" fg:w="1"/><text x="85.8269%" y="367.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as glm::vec::traits::GenNumVec&lt;T&gt;&gt;::sum (1 samples, 0.48%)</title><rect x="85.5769%" y="341" width="0.4808%" height="15" fill="rgb(210,31,22)" fg:x="178" fg:w="1"/><text x="85.8269%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="85.5769%" y="325" width="0.4808%" height="15" fill="rgb(239,54,39)" fg:x="178" fg:w="1"/><text x="85.8269%" y="335.50"></text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::{{closure}} (1 samples, 0.48%)</title><rect x="86.0577%" y="197" width="0.4808%" height="15" fill="rgb(230,99,41)" fg:x="179" fg:w="1"/><text x="86.3077%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (1 samples, 0.48%)</title><rect x="86.0577%" y="181" width="0.4808%" height="15" fill="rgb(253,106,12)" fg:x="179" fg:w="1"/><text x="86.3077%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.48%)</title><rect x="86.0577%" y="165" width="0.4808%" height="15" fill="rgb(213,46,41)" fg:x="179" fg:w="1"/><text x="86.3077%" y="175.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.48%)</title><rect x="87.0192%" y="117" width="0.4808%" height="15" fill="rgb(215,133,35)" fg:x="181" fg:w="1"/><text x="87.2692%" y="127.50"></text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::determinant (2 samples, 0.96%)</title><rect x="87.0192%" y="133" width="0.9615%" height="15" fill="rgb(213,28,5)" fg:x="181" fg:w="2"/><text x="87.2692%" y="143.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.48%)</title><rect x="87.5000%" y="117" width="0.4808%" height="15" fill="rgb(215,77,49)" fg:x="182" fg:w="1"/><text x="87.7500%" y="127.50"></text></g><g><title>glm::builtin::matrix::inverse (8 samples, 3.85%)</title><rect x="86.5385%" y="165" width="3.8462%" height="15" fill="rgb(248,100,22)" fg:x="180" fg:w="8"/><text x="86.7885%" y="175.50">glm:..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::inverse (7 samples, 3.37%)</title><rect x="87.0192%" y="149" width="3.3654%" height="15" fill="rgb(208,67,9)" fg:x="181" fg:w="7"/><text x="87.2692%" y="159.50">glm..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector4&lt;T&gt;&gt; for glm::mat::mat::Matrix4&lt;T&gt;&gt;::inverse::{{closure}} (5 samples, 2.40%)</title><rect x="87.9808%" y="133" width="2.4038%" height="15" fill="rgb(219,133,21)" fg:x="183" fg:w="5"/><text x="88.2308%" y="143.50">gl..</text></g><g><title>glm::mat::sqmat::&lt;impl glm::mat::traits::GenSquareMat&lt;T,glm::vec::vec::Vector3&lt;T&gt;&gt; for glm::mat::mat::Matrix3&lt;T&gt;&gt;::determinant (5 samples, 2.40%)</title><rect x="87.9808%" y="117" width="2.4038%" height="15" fill="rgb(246,46,29)" fg:x="183" fg:w="5"/><text x="88.2308%" y="127.50">gl..</text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (5 samples, 2.40%)</title><rect x="87.9808%" y="101" width="2.4038%" height="15" fill="rgb(246,185,52)" fg:x="183" fg:w="5"/><text x="88.2308%" y="111.50">&lt;f..</text></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.96%)</title><rect x="90.8654%" y="133" width="0.9615%" height="15" fill="rgb(252,136,11)" fg:x="189" fg:w="2"/><text x="91.1154%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.96%)</title><rect x="90.8654%" y="117" width="0.9615%" height="15" fill="rgb(219,138,53)" fg:x="189" fg:w="2"/><text x="91.1154%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (2 samples, 0.96%)</title><rect x="90.8654%" y="101" width="0.9615%" height="15" fill="rgb(211,51,23)" fg:x="189" fg:w="2"/><text x="91.1154%" y="111.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.96%)</title><rect x="90.8654%" y="85" width="0.9615%" height="15" fill="rgb(247,221,28)" fg:x="189" fg:w="2"/><text x="91.1154%" y="95.50"></text></g><g><title>&lt;rustracer::primitive::Square as rustracer::primitive::PrimitiveComponent&gt;::intersect::within_square (2 samples, 0.96%)</title><rect x="90.8654%" y="69" width="0.9615%" height="15" fill="rgb(251,222,45)" fg:x="189" fg:w="2"/><text x="91.1154%" y="79.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (2 samples, 0.96%)</title><rect x="90.8654%" y="53" width="0.9615%" height="15" fill="rgb(217,162,53)" fg:x="189" fg:w="2"/><text x="91.1154%" y="63.50"></text></g><g><title>core::ops::range::RangeBounds::contains (2 samples, 0.96%)</title><rect x="90.8654%" y="37" width="0.9615%" height="15" fill="rgb(229,93,14)" fg:x="189" fg:w="2"/><text x="91.1154%" y="47.50"></text></g><g><title>rustracer::primitive::Plane::uv_map (2 samples, 0.96%)</title><rect x="93.2692%" y="117" width="0.9615%" height="15" fill="rgb(209,67,49)" fg:x="194" fg:w="2"/><text x="93.5192%" y="127.50"></text></g><g><title>&lt;rustracer::primitive::Square as rustracer::primitive::PrimitiveComponent&gt;::intersect (9 samples, 4.33%)</title><rect x="90.3846%" y="149" width="4.3269%" height="15" fill="rgb(213,87,29)" fg:x="188" fg:w="9"/><text x="90.6346%" y="159.50">&lt;rust..</text></g><g><title>rustracer::primitive::Plane::intersect (6 samples, 2.88%)</title><rect x="91.8269%" y="133" width="2.8846%" height="15" fill="rgb(205,151,52)" fg:x="191" fg:w="6"/><text x="92.0769%" y="143.50">ru..</text></g><g><title>rustracer::raytracer::Ray::at (1 samples, 0.48%)</title><rect x="94.2308%" y="117" width="0.4808%" height="15" fill="rgb(253,215,39)" fg:x="196" fg:w="1"/><text x="94.4808%" y="127.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="94.2308%" y="101" width="0.4808%" height="15" fill="rgb(221,220,41)" fg:x="196" fg:w="1"/><text x="94.4808%" y="111.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="94.2308%" y="85" width="0.4808%" height="15" fill="rgb(218,133,21)" fg:x="196" fg:w="1"/><text x="94.4808%" y="95.50"></text></g><g><title>rustracer::primitive::Primitive::intersect (10 samples, 4.81%)</title><rect x="90.3846%" y="165" width="4.8077%" height="15" fill="rgb(221,193,43)" fg:x="188" fg:w="10"/><text x="90.6346%" y="175.50">rustra..</text></g><g><title>core::iter::traits::iterator::Iterator::min (1 samples, 0.48%)</title><rect x="94.7115%" y="149" width="0.4808%" height="15" fill="rgb(240,128,52)" fg:x="197" fg:w="1"/><text x="94.9615%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1 samples, 0.48%)</title><rect x="94.7115%" y="133" width="0.4808%" height="15" fill="rgb(253,114,12)" fg:x="197" fg:w="1"/><text x="94.9615%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.48%)</title><rect x="94.7115%" y="117" width="0.4808%" height="15" fill="rgb(215,223,47)" fg:x="197" fg:w="1"/><text x="94.9615%" y="127.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.48%)</title><rect x="94.7115%" y="101" width="0.4808%" height="15" fill="rgb(248,225,23)" fg:x="197" fg:w="1"/><text x="94.9615%" y="111.50"></text></g><g><title>rustracer::lights::Light::is_visible (21 samples, 10.10%)</title><rect x="86.0577%" y="389" width="10.0962%" height="15" fill="rgb(250,108,0)" fg:x="179" fg:w="21"/><text x="86.3077%" y="399.50">rustracer::ligh..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (21 samples, 10.10%)</title><rect x="86.0577%" y="373" width="10.0962%" height="15" fill="rgb(228,208,7)" fg:x="179" fg:w="21"/><text x="86.3077%" y="383.50">&lt;core::iter::ad..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (21 samples, 10.10%)</title><rect x="86.0577%" y="357" width="10.0962%" height="15" fill="rgb(244,45,10)" fg:x="179" fg:w="21"/><text x="86.3077%" y="367.50">core::iter::tra..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (21 samples, 10.10%)</title><rect x="86.0577%" y="341" width="10.0962%" height="15" fill="rgb(207,125,25)" fg:x="179" fg:w="21"/><text x="86.3077%" y="351.50">&lt;usize as core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 10.10%)</title><rect x="86.0577%" y="325" width="10.0962%" height="15" fill="rgb(210,195,18)" fg:x="179" fg:w="21"/><text x="86.3077%" y="335.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 10.10%)</title><rect x="86.0577%" y="309" width="10.0962%" height="15" fill="rgb(249,80,12)" fg:x="179" fg:w="21"/><text x="86.3077%" y="319.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 10.10%)</title><rect x="86.0577%" y="293" width="10.0962%" height="15" fill="rgb(221,65,9)" fg:x="179" fg:w="21"/><text x="86.3077%" y="303.50">&lt;core::iter::ad..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (21 samples, 10.10%)</title><rect x="86.0577%" y="277" width="10.0962%" height="15" fill="rgb(235,49,36)" fg:x="179" fg:w="21"/><text x="86.3077%" y="287.50">core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 10.10%)</title><rect x="86.0577%" y="261" width="10.0962%" height="15" fill="rgb(225,32,20)" fg:x="179" fg:w="21"/><text x="86.3077%" y="271.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 10.10%)</title><rect x="86.0577%" y="245" width="10.0962%" height="15" fill="rgb(215,141,46)" fg:x="179" fg:w="21"/><text x="86.3077%" y="255.50">&lt;core::iter::ad..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 10.10%)</title><rect x="86.0577%" y="229" width="10.0962%" height="15" fill="rgb(250,160,47)" fg:x="179" fg:w="21"/><text x="86.3077%" y="239.50">core::iter::tra..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (21 samples, 10.10%)</title><rect x="86.0577%" y="213" width="10.0962%" height="15" fill="rgb(216,222,40)" fg:x="179" fg:w="21"/><text x="86.3077%" y="223.50">core::iter::ada..</text></g><g><title>rustracer::lights::Light::is_visible::{{closure}} (20 samples, 9.62%)</title><rect x="86.5385%" y="197" width="9.6154%" height="15" fill="rgb(234,217,39)" fg:x="180" fg:w="20"/><text x="86.7885%" y="207.50">rustracer::lig..</text></g><g><title>rustracer::shape::Shape::intersect (20 samples, 9.62%)</title><rect x="86.5385%" y="181" width="9.6154%" height="15" fill="rgb(207,178,40)" fg:x="180" fg:w="20"/><text x="86.7885%" y="191.50">rustracer::sha..</text></g><g><title>rustracer::raytracer::Ray::to_object_space (2 samples, 0.96%)</title><rect x="95.1923%" y="165" width="0.9615%" height="15" fill="rgb(221,136,13)" fg:x="198" fg:w="2"/><text x="95.4423%" y="175.50"></text></g><g><title>rustracer::raytracer::Ray::transform (2 samples, 0.96%)</title><rect x="95.1923%" y="149" width="0.9615%" height="15" fill="rgb(249,199,10)" fg:x="198" fg:w="2"/><text x="95.4423%" y="159.50"></text></g><g><title>glm::mat::mat::Matrix4&lt;T&gt;::mul_v (2 samples, 0.96%)</title><rect x="95.1923%" y="133" width="0.9615%" height="15" fill="rgb(249,222,13)" fg:x="198" fg:w="2"/><text x="95.4423%" y="143.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="95.6731%" y="117" width="0.4808%" height="15" fill="rgb(244,185,38)" fg:x="199" fg:w="1"/><text x="95.9231%" y="127.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (1 samples, 0.48%)</title><rect x="96.1538%" y="357" width="0.4808%" height="15" fill="rgb(236,202,9)" fg:x="200" fg:w="1"/><text x="96.4038%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.48%)</title><rect x="96.1538%" y="341" width="0.4808%" height="15" fill="rgb(250,229,37)" fg:x="200" fg:w="1"/><text x="96.4038%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 12.02%)</title><rect x="85.0962%" y="517" width="12.0192%" height="15" fill="rgb(206,174,23)" fg:x="177" fg:w="25"/><text x="85.3462%" y="527.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 12.02%)</title><rect x="85.0962%" y="501" width="12.0192%" height="15" fill="rgb(211,33,43)" fg:x="177" fg:w="25"/><text x="85.3462%" y="511.50">&lt;core::iter::adapt..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (25 samples, 12.02%)</title><rect x="85.0962%" y="485" width="12.0192%" height="15" fill="rgb(245,58,50)" fg:x="177" fg:w="25"/><text x="85.3462%" y="495.50">core::iter::adapte..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 12.02%)</title><rect x="85.0962%" y="469" width="12.0192%" height="15" fill="rgb(244,68,36)" fg:x="177" fg:w="25"/><text x="85.3462%" y="479.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 12.02%)</title><rect x="85.0962%" y="453" width="12.0192%" height="15" fill="rgb(232,229,15)" fg:x="177" fg:w="25"/><text x="85.3462%" y="463.50">&lt;core::iter::adapt..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 12.02%)</title><rect x="85.0962%" y="437" width="12.0192%" height="15" fill="rgb(254,30,23)" fg:x="177" fg:w="25"/><text x="85.3462%" y="447.50">core::iter::traits..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (25 samples, 12.02%)</title><rect x="85.0962%" y="421" width="12.0192%" height="15" fill="rgb(235,160,14)" fg:x="177" fg:w="25"/><text x="85.3462%" y="431.50">core::iter::adapte..</text></g><g><title>rustracer::lights::phong::{{closure}} (25 samples, 12.02%)</title><rect x="85.0962%" y="405" width="12.0192%" height="15" fill="rgb(212,155,44)" fg:x="177" fg:w="25"/><text x="85.3462%" y="415.50">rustracer::lights:..</text></g><g><title>rustracer::lights::reflect_around (2 samples, 0.96%)</title><rect x="96.1538%" y="389" width="0.9615%" height="15" fill="rgb(226,2,50)" fg:x="200" fg:w="2"/><text x="96.4038%" y="399.50"></text></g><g><title>glm::builtin::geom::normalize (2 samples, 0.96%)</title><rect x="96.1538%" y="373" width="0.9615%" height="15" fill="rgb(234,177,6)" fg:x="200" fg:w="2"/><text x="96.4038%" y="383.50"></text></g><g><title>glm::builtin::exp::inversesqrt (1 samples, 0.48%)</title><rect x="96.6346%" y="357" width="0.4808%" height="15" fill="rgb(217,24,9)" fg:x="201" fg:w="1"/><text x="96.8846%" y="367.50"></text></g><g><title>&lt;f32 as glm::traits::GenNum&lt;f32&gt;&gt;::map (1 samples, 0.48%)</title><rect x="96.6346%" y="341" width="0.4808%" height="15" fill="rgb(220,13,46)" fg:x="201" fg:w="1"/><text x="96.8846%" y="351.50"></text></g><g><title>glm::builtin::exp::inversesqrt::{{closure}} (1 samples, 0.48%)</title><rect x="96.6346%" y="325" width="0.4808%" height="15" fill="rgb(239,221,27)" fg:x="201" fg:w="1"/><text x="96.8846%" y="335.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::recip (1 samples, 0.48%)</title><rect x="96.6346%" y="309" width="0.4808%" height="15" fill="rgb(222,198,25)" fg:x="201" fg:w="1"/><text x="96.8846%" y="319.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::recip (1 samples, 0.48%)</title><rect x="96.6346%" y="293" width="0.4808%" height="15" fill="rgb(211,99,13)" fg:x="201" fg:w="1"/><text x="96.8846%" y="303.50"></text></g><g><title>glm::builtin::exp::inversesqrt (1 samples, 0.48%)</title><rect x="97.1154%" y="501" width="0.4808%" height="15" fill="rgb(232,111,31)" fg:x="202" fg:w="1"/><text x="97.3654%" y="511.50"></text></g><g><title>&lt;f32 as glm::traits::GenNum&lt;f32&gt;&gt;::map (1 samples, 0.48%)</title><rect x="97.1154%" y="485" width="0.4808%" height="15" fill="rgb(245,82,37)" fg:x="202" fg:w="1"/><text x="97.3654%" y="495.50"></text></g><g><title>glm::builtin::exp::inversesqrt::{{closure}} (1 samples, 0.48%)</title><rect x="97.1154%" y="469" width="0.4808%" height="15" fill="rgb(227,149,46)" fg:x="202" fg:w="1"/><text x="97.3654%" y="479.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::recip (1 samples, 0.48%)</title><rect x="97.1154%" y="453" width="0.4808%" height="15" fill="rgb(218,36,50)" fg:x="202" fg:w="1"/><text x="97.3654%" y="463.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::recip (1 samples, 0.48%)</title><rect x="97.1154%" y="437" width="0.4808%" height="15" fill="rgb(226,80,48)" fg:x="202" fg:w="1"/><text x="97.3654%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (158 samples, 75.96%)</title><rect x="22.1154%" y="613" width="75.9615%" height="15" fill="rgb(238,224,15)" fg:x="46" fg:w="158"/><text x="22.3654%" y="623.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (158 samples, 75.96%)</title><rect x="22.1154%" y="597" width="75.9615%" height="15" fill="rgb(241,136,10)" fg:x="46" fg:w="158"/><text x="22.3654%" y="607.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (157 samples, 75.48%)</title><rect x="22.5962%" y="581" width="75.4808%" height="15" fill="rgb(208,32,45)" fg:x="47" fg:w="157"/><text x="22.8462%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>rustracer::raytracer::RayTracer::render::{{closure}} (156 samples, 75.00%)</title><rect x="23.0769%" y="565" width="75.0000%" height="15" fill="rgb(207,135,9)" fg:x="48" fg:w="156"/><text x="23.3269%" y="575.50">rustracer::raytracer::RayTracer::render::{{closure}}</text></g><g><title>rustracer::raytracer::RayTracer::trace_ray (107 samples, 51.44%)</title><rect x="46.6346%" y="549" width="51.4423%" height="15" fill="rgb(206,86,44)" fg:x="97" fg:w="107"/><text x="46.8846%" y="559.50">rustracer::raytracer::RayTracer::trace_ray</text></g><g><title>rustracer::lights::phong (27 samples, 12.98%)</title><rect x="85.0962%" y="533" width="12.9808%" height="15" fill="rgb(245,177,15)" fg:x="177" fg:w="27"/><text x="85.3462%" y="543.50">rustracer::lights::p..</text></g><g><title>glm::builtin::geom::normalize (2 samples, 0.96%)</title><rect x="97.1154%" y="517" width="0.9615%" height="15" fill="rgb(206,64,50)" fg:x="202" fg:w="2"/><text x="97.3654%" y="527.50"></text></g><g><title>glm::builtin::geom::dot (1 samples, 0.48%)</title><rect x="97.5962%" y="501" width="0.4808%" height="15" fill="rgb(234,36,40)" fg:x="203" fg:w="1"/><text x="97.8462%" y="511.50"></text></g><g><title>&lt;glm::vec::vec::Vector4&lt;T&gt; as glm::vec::traits::GenNumVec&lt;T&gt;&gt;::sum (1 samples, 0.48%)</title><rect x="97.5962%" y="485" width="0.4808%" height="15" fill="rgb(213,64,8)" fg:x="203" fg:w="1"/><text x="97.8462%" y="495.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.48%)</title><rect x="97.5962%" y="469" width="0.4808%" height="15" fill="rgb(210,75,36)" fg:x="203" fg:w="1"/><text x="97.8462%" y="479.50"></text></g><g><title>__libc_start_main_impl (188 samples, 90.38%)</title><rect x="8.1731%" y="901" width="90.3846%" height="15" fill="rgb(229,88,21)" fg:x="17" fg:w="188"/><text x="8.4231%" y="911.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (188 samples, 90.38%)</title><rect x="8.1731%" y="885" width="90.3846%" height="15" fill="rgb(252,204,47)" fg:x="17" fg:w="188"/><text x="8.4231%" y="895.50">__libc_start_call_main</text></g><g><title>main (188 samples, 90.38%)</title><rect x="8.1731%" y="869" width="90.3846%" height="15" fill="rgb(208,77,27)" fg:x="17" fg:w="188"/><text x="8.4231%" y="879.50">main</text></g><g><title>std::rt::lang_start_internal (188 samples, 90.38%)</title><rect x="8.1731%" y="853" width="90.3846%" height="15" fill="rgb(221,76,26)" fg:x="17" fg:w="188"/><text x="8.4231%" y="863.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (188 samples, 90.38%)</title><rect x="8.1731%" y="837" width="90.3846%" height="15" fill="rgb(225,139,18)" fg:x="17" fg:w="188"/><text x="8.4231%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (188 samples, 90.38%)</title><rect x="8.1731%" y="821" width="90.3846%" height="15" fill="rgb(230,137,11)" fg:x="17" fg:w="188"/><text x="8.4231%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (188 samples, 90.38%)</title><rect x="8.1731%" y="805" width="90.3846%" height="15" fill="rgb(212,28,1)" fg:x="17" fg:w="188"/><text x="8.4231%" y="815.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (188 samples, 90.38%)</title><rect x="8.1731%" y="789" width="90.3846%" height="15" fill="rgb(248,164,17)" fg:x="17" fg:w="188"/><text x="8.4231%" y="799.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (188 samples, 90.38%)</title><rect x="8.1731%" y="773" width="90.3846%" height="15" fill="rgb(222,171,42)" fg:x="17" fg:w="188"/><text x="8.4231%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (188 samples, 90.38%)</title><rect x="8.1731%" y="757" width="90.3846%" height="15" fill="rgb(243,84,45)" fg:x="17" fg:w="188"/><text x="8.4231%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (188 samples, 90.38%)</title><rect x="8.1731%" y="741" width="90.3846%" height="15" fill="rgb(252,49,23)" fg:x="17" fg:w="188"/><text x="8.4231%" y="751.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (188 samples, 90.38%)</title><rect x="8.1731%" y="725" width="90.3846%" height="15" fill="rgb(215,19,7)" fg:x="17" fg:w="188"/><text x="8.4231%" y="735.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (188 samples, 90.38%)</title><rect x="8.1731%" y="709" width="90.3846%" height="15" fill="rgb(238,81,41)" fg:x="17" fg:w="188"/><text x="8.4231%" y="719.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (188 samples, 90.38%)</title><rect x="8.1731%" y="693" width="90.3846%" height="15" fill="rgb(210,199,37)" fg:x="17" fg:w="188"/><text x="8.4231%" y="703.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (188 samples, 90.38%)</title><rect x="8.1731%" y="677" width="90.3846%" height="15" fill="rgb(244,192,49)" fg:x="17" fg:w="188"/><text x="8.4231%" y="687.50">core::ops::function::FnOnce::call_once</text></g><g><title>rustracer::main (188 samples, 90.38%)</title><rect x="8.1731%" y="661" width="90.3846%" height="15" fill="rgb(226,211,11)" fg:x="17" fg:w="188"/><text x="8.4231%" y="671.50">rustracer::main</text></g><g><title>rustracer::run (188 samples, 90.38%)</title><rect x="8.1731%" y="645" width="90.3846%" height="15" fill="rgb(236,162,54)" fg:x="17" fg:w="188"/><text x="8.4231%" y="655.50">rustracer::run</text></g><g><title>rustracer::raytracer::RayTracer::render (159 samples, 76.44%)</title><rect x="22.1154%" y="629" width="76.4423%" height="15" fill="rgb(220,229,9)" fg:x="46" fg:w="159"/><text x="22.3654%" y="639.50">rustracer::raytracer::RayTracer::render</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (1 samples, 0.48%)</title><rect x="98.0769%" y="613" width="0.4808%" height="15" fill="rgb(250,87,22)" fg:x="204" fg:w="1"/><text x="98.3269%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="98.0769%" y="597" width="0.4808%" height="15" fill="rgb(239,43,17)" fg:x="204" fg:w="1"/><text x="98.3269%" y="607.50"></text></g><g><title>_start (189 samples, 90.87%)</title><rect x="8.1731%" y="917" width="90.8654%" height="15" fill="rgb(231,177,25)" fg:x="17" fg:w="189"/><text x="8.4231%" y="927.50">_start</text></g><g><title>_dl_start (1 samples, 0.48%)</title><rect x="98.5577%" y="901" width="0.4808%" height="15" fill="rgb(219,179,1)" fg:x="205" fg:w="1"/><text x="98.8077%" y="911.50"></text></g><g><title>_dl_start_final (1 samples, 0.48%)</title><rect x="98.5577%" y="885" width="0.4808%" height="15" fill="rgb(238,219,53)" fg:x="205" fg:w="1"/><text x="98.8077%" y="895.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.48%)</title><rect x="98.5577%" y="869" width="0.4808%" height="15" fill="rgb(232,167,36)" fg:x="205" fg:w="1"/><text x="98.8077%" y="879.50"></text></g><g><title>dl_main (1 samples, 0.48%)</title><rect x="98.5577%" y="853" width="0.4808%" height="15" fill="rgb(244,19,51)" fg:x="205" fg:w="1"/><text x="98.8077%" y="863.50"></text></g><g><title>rtld_setup_main_map (1 samples, 0.48%)</title><rect x="98.5577%" y="837" width="0.4808%" height="15" fill="rgb(224,6,22)" fg:x="205" fg:w="1"/><text x="98.8077%" y="847.50"></text></g><g><title>_dl_process_pt_gnu_property (1 samples, 0.48%)</title><rect x="98.5577%" y="821" width="0.4808%" height="15" fill="rgb(224,145,5)" fg:x="205" fg:w="1"/><text x="98.8077%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.48%)</title><rect x="98.5577%" y="805" width="0.4808%" height="15" fill="rgb(234,130,49)" fg:x="205" fg:w="1"/><text x="98.8077%" y="815.50"></text></g><g><title>anon.d62a7e7fce6baa56d207d9697665b04d.20.llvm.4965461720587879498 (1 samples, 0.48%)</title><rect x="99.0385%" y="917" width="0.4808%" height="15" fill="rgb(254,6,2)" fg:x="206" fg:w="1"/><text x="99.2885%" y="927.50"></text></g><g><title>rustracer::primitive::Primitive::intersect (1 samples, 0.48%)</title><rect x="99.0385%" y="901" width="0.4808%" height="15" fill="rgb(208,96,46)" fg:x="206" fg:w="1"/><text x="99.2885%" y="911.50"></text></g><g><title>all (208 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="208"/><text x="0.2500%" y="959.50"></text></g><g><title>rustracer (203 samples, 97.60%)</title><rect x="2.4038%" y="933" width="97.5962%" height="15" fill="rgb(233,210,1)" fg:x="5" fg:w="203"/><text x="2.6538%" y="943.50">rustracer</text></g><g><title>core::fmt::write (1 samples, 0.48%)</title><rect x="99.5192%" y="917" width="0.4808%" height="15" fill="rgb(244,137,37)" fg:x="207" fg:w="1"/><text x="99.7692%" y="927.50"></text></g></svg></svg>